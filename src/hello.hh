// Generated by dzn code from /home/karol/dev_projects/DezyneDebugger/hello_test_default/hello.dzn
//dzn code examples/GetSpeed.dzn
//dzn code --model=hello_world examples/GetSpeed.dzn
//g++ -O main -I runtime/c++ GetSpeed.cc main.cc runtime/c++/runtime.cc runtime/c++/pump.cc -lpthread
// Dezyne --- Dezyne command line tools
//
// Copyright Â© 2018 Jan Nieuwenhuizen <janneke@gnu.org>
//
// This file is part of Dezyne.
//
// Dezyne is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// Dezyne is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public
// License along with Dezyne.  If not, see <http://www.gnu.org/licenses/>.
//
// Commentary:
//
// Code:
#include <dzn/runtime.hh>
namespace dzn
{
  struct locator;
  struct runtime;
}
#include <iostream>
#include <vector>
#include <map>
#ifndef IHELLO_WORLD_HH
#define IHELLO_WORLD_HH
struct ihello_world
{
  enum struct SpeedState
    {
      Fast,Slow
    };
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<void ()> GetSpeed;
      dzn::in::event<::ihello_world::SpeedState (int carSpeed)> SetSpeed;
    } in;
  struct
    {
      dzn::out::event<void (int carSpeed)> ReturnSpeed;
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  ihello_world (dzn::port::meta const& m);
  template <typename Component>
  ihello_world (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
    {
      in.GetSpeed.set (that, this, "GetSpeed");
      out.ReturnSpeed.set (that, this, "ReturnSpeed");
      in.SetSpeed.set (that, this, "SetSpeed");
    }
  virtual ~ihello_world ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::ihello_world& provide, ::ihello_world& require)
    {
      provide.out.ReturnSpeed = require.out.ReturnSpeed;
      require.in.GetSpeed = provide.in.GetSpeed;
      require.in.SetSpeed = provide.in.SetSpeed;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
namespace dzn
{
  char const* to_cstr (::ihello_world::SpeedState v);
  template <>
  std::string to_string (::ihello_world::SpeedState v);
}
template <typename Char, typename Traits>
std::basic_ostream<Char, Traits> & operator << (std::basic_ostream<Char, Traits>& os, ::ihello_world::SpeedState v)
{
  return os << dzn::to_cstr (v);
}
namespace dzn
{
  ::ihello_world::SpeedState to_ihello_world_SpeedState (std::string s);
}
#endif // IHELLO_WORLD_HH
#ifndef IACTUATOR_HH
#define IACTUATOR_HH
struct IActuator
{
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<bool (int speed)> TooFast;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  IActuator (dzn::port::meta const& m);
  template <typename Component>
  IActuator (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
    {
      in.TooFast.set (that, this, "TooFast");
    }
  virtual ~IActuator ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::IActuator& provide, ::IActuator& require)
    {
      require.in.TooFast = provide.in.TooFast;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
#endif // IACTUATOR_HH
#ifndef HELLO_WORLD_COMP_HH
#define HELLO_WORLD_COMP_HH
struct hello_world_comp: public dzn::component
{
  dzn::meta dzn_meta;
  dzn::runtime& dzn_runtime;
  dzn::locator const& dzn_locator;
  int compSpeed;
  ::ihello_world::SpeedState* dzn_reply_ihello_world_SpeedState;
  bool* dzn_reply_bool;
  std::function<void ()>* dzn_out_ihello_p;
  ::ihello_world ihello_p;
  ::IActuator actuator;
  hello_world_comp (dzn::locator const& locator);
  private:
  void ihello_p_GetSpeed ();
  void ihello_p_SetSpeed (int carSpeed);
};
#endif // HELLO_WORLD_COMP_HH
#ifndef HELLO_WORLD_HH
#define HELLO_WORLD_HH
struct hello_world: public dzn::component
{
  dzn::meta dzn_meta;
  dzn::runtime& dzn_runtime;
  dzn::locator const& dzn_locator;
  ::hello_world_comp hello_comp;
  ::ihello_world& ihello;
  ::IActuator& actuator;
  hello_world (dzn::locator const& locator);
};
#endif // HELLO_WORLD_HH
// version 2.18.0
